{"version":3,"sources":["logo.svg","components/pages/header/index.jsx","components/pages/content/xrp.jpg","components/pages/content/index.jsx","components/pages/footer/index.jsx","components/pages/index.jsx","XRPLedger.js","Routes.jsx","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","ToastContainer","position","className","Toast","onClose","onHide","autohide","Header","src","alt","Body","msg","ModalForm","state","address","handleChange","e","setState","target","value","handleSubmit","Modal","this","size","backdrop","centered","closeButton","Title","Form","Group","Label","Control","type","onChange","placeholder","Footer","Button","variant","onClick","Component","useState","events","ledger","ledgerInstance","modalShow","setModalShow","submitted","setSubmitted","alertShow","setAlertShow","textAddress","setTextAddress","buttonHide","setButtonHide","xrpAddress","setXrpAddress","hideGames","setHideGame","errorMsg","setErrorMsg","errorColor","setErrorColor","useEffect","isValidAddress","image","NavDropdown","title","Item","style","fontSize","localStorage","setItem","Navbar","bg","expand","fixed","id","Container","Brand","href","Toggle","Collapse","Nav","Link","disabled","Badge","Divider","window","open","show","delay","Content","Row","img","Accordion","eventKey","action","method","role","name","required","rows","OverlayTrigger","overlay","Tooltip","pointerEvents","IndexPage","obj","xrpl","require","Ledger","init","a","connect","isConnected","console","log","credential","JSON","parse","stringify","Credentials","Distributer","Seed","wallet","Wallet","fromSeed","getAccountObjects","errorOccured","errorMessage","client","then","isClientConnected","isValidClassicAddress","doTestRun","test_wallet","request","response","getXRPAddressBalance","getXrpBalance","balance","getBalances","xAddress","clientAddress","bal","fundWallet","disconnect","sendPayment","amount","txJson","xrpToDrops","autoFill","prepared","max_ledger","LastLedgerSequence","Fee","signed","sign","hash","tx_blob","submitTransaction","tx","result","meta","TransactionResult","getBalanceChanges","setTrustLine","transaction","signersCount","autofill","submitAndWait","getAccountChannel","requestAll","getAccountLines","getAccountInfo","getAccountCurrencies","getLedgerData","getLedger","PUBLIC_SERVER","Client","Routers","prevProps","prevState","exact","path","element","handleAddress","add","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"01BAAe,I,wLCmBTA,EAAQ,SAACC,GACX,OACI,cAACC,EAAA,EAAD,CAAgBC,SAAS,UAAUC,UAAU,MAA7C,SACI,eAACC,EAAA,EAAD,2BACIJ,GADJ,IAEAK,QAASL,EAAMM,OACfC,UAAQ,EAHR,UAII,eAACH,EAAA,EAAMI,OAAP,WACA,qBACIC,IAAI,2BACJN,UAAU,eACVO,IAAI,KAER,wBAAQP,UAAU,UAAlB,8BAEA,cAACC,EAAA,EAAMO,KAAP,UAAaX,EAAMY,aA8G7BC,E,4MAEFC,MAAM,CAAEC,QAAS,M,EAEjBC,aAAe,SAACC,GAAD,OAAO,EAAKC,SAAS,CAACH,QAASE,EAAEE,OAAOC,S,EACvDC,aAAe,WACX,EAAKrB,MAAMqB,aAAa,EAAKP,MAAMC,SACnC,EAAKf,MAAMM,U,4CAGf,WACE,OACE,eAACgB,EAAA,EAAD,2BACQC,KAAKvB,OADb,IAEIwB,KAAK,KACL,kBAAgB,gCAChBC,SAAS,SACTC,UAAQ,EALZ,UAOI,cAACJ,EAAA,EAAMd,OAAP,CAAcmB,aAAW,EAAzB,SACI,cAACL,EAAA,EAAMM,MAAP,2BAEJ,cAACN,EAAA,EAAMX,KAAP,UACI,eAACkB,EAAA,EAAKC,MAAN,WACI,cAACD,EAAA,EAAKE,MAAN,4BACA,cAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,OAAOC,SAAUX,KAAKP,aAAcmB,YAAY,2BAG3E,cAACb,EAAA,EAAMc,OAAP,UACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUL,KAAK,SAASM,QAAShB,KAAKF,aAAtD,8B,GA7BQmB,aAuCThC,EA/IA,SAACR,GACZ,MAAoCyC,mBAASzC,EAAM0C,OAAOC,QAA1D,mBAAOC,EAAP,KACA,GADA,KACkCH,oBAAS,IAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACA,EAAkCP,oBAAS,GAA3C,mBAAOQ,EAAP,KAAkBC,EAAlB,KACA,EAAsCT,mBAAS,MAA/C,mBAAOU,EAAP,KAAoBC,EAApB,KACA,EAAoCX,mBAAS,MAA7C,mBAAOY,EAAP,KAAmBC,EAAnB,KACA,EAAoCb,mBAAS,IAA7C,mBAAOc,EAAP,KAAmBC,EAAnB,KACA,EAAiCf,mBAAS,MAA1C,mBAAOgB,EAAP,KAAkBC,EAAlB,KACA,EAAgCjB,mBAAS,IAAzC,mBAAOkB,EAAP,KAAiBC,EAAjB,KACA,EAAoCnB,mBAAS,QAA7C,mBAAOoB,EAAP,KAAmBC,EAAnB,KA0CA,OAxCAC,qBAAU,WACN,GAAIhB,GAA4B,KAAfQ,EACd,GAAIX,EAAeoB,eAAeT,GAAa,CAC1C,IAAMU,EACF,cAACC,EAAA,EAAD,CAAaC,MAAO,cAAC,IAAD,IAApB,SACI,cAACD,EAAA,EAAYE,KAAb,UACI,mBAAGC,MAAO,CAACC,SAAS,QAApB,SAA8Bf,QAI1CH,EAAea,GACfX,EAAc,MACdI,EAAY,oBAEZR,GAAa,GACbY,EAAc,QACdF,EAAa,qBAEbW,aAAaC,QAAQ,aAAcjB,QAInCL,GAAa,GACbY,EAAc,WACdF,EAAa,YAAcL,EAAY,kBAI/C,IAAKR,GAA4B,KAAfQ,EAAmB,CACjC,IAAMU,EACF,cAAC5B,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAMO,GAAa,IAAtD,qBAIJQ,EAAcW,GACdb,EAAe,MACfM,EAAY,uBAEjB,CAACH,EAAYX,EAAgBG,EAAW/C,EAAM0C,SAG7C,mCACC,cAAC+B,EAAA,EAAD,CAAQC,GAAG,QAAQpC,QAAQ,QAAQqC,OAAO,KAAKC,MAAM,MAAMC,GAAG,MAA9D,SACG,eAACC,EAAA,EAAD,CAAW3E,UAAU,UAArB,UACI,eAACsE,EAAA,EAAOM,MAAR,CAAc5E,UAAU,UAAU6E,KAAK,KAAvC,kBAAiD,4CACjD,cAACP,EAAA,EAAOQ,OAAR,CAAe,gBAAc,2BAC7B,cAACR,EAAA,EAAOS,SAAR,CAAiBL,GAAG,yBAApB,SACA,eAACM,EAAA,EAAD,CAAKhF,UAAU,uBAAf,UACI,cAACgF,EAAA,EAAIC,KAAL,CAAUjF,UAAU,UAAU6E,KAAK,QAAnC,kBACA,cAACG,EAAA,EAAIC,KAAL,CAAUjF,UAAU,UAAU6E,KAAK,SAAnC,mBACA,cAACG,EAAA,EAAIC,KAAL,CAAUjF,UAAU,UAAU6E,KAAK,YAAnC,sBACA,cAACG,EAAA,EAAIC,KAAL,CAAUjF,UAAU,UAAU6E,KAAK,WAAnC,qBACA,eAACd,EAAA,EAAD,CAAa/D,UAAU,UAAUgE,MAAM,SAASU,GAAG,qBAAnD,UACI,eAACX,EAAA,EAAYE,KAAb,CAAkBjE,UAAU,UAAUkF,UAAQ,EAACL,KAAK,cAApD,wBAA6E,cAACM,EAAA,EAAD,CAAOZ,GAAG,YAAV,qBAC7E,cAACR,EAAA,EAAYqB,QAAb,IACA,eAACrB,EAAA,EAAYE,KAAb,CAAkBjE,UAAWsD,EAAWuB,KAAK,aAA7C,wBAAqE,cAACM,EAAA,EAAD,CAAOZ,GAAG,YAAV,4BACrE,eAACR,EAAA,EAAYE,KAAb,CAAkBjE,UAAWsD,EAAWuB,KAAK,IAA7C,oBAAwD,cAACM,EAAA,EAAD,CAAOZ,GAAG,YAAV,qBACxD,cAACR,EAAA,EAAYqB,QAAb,IACA,eAACrB,EAAA,EAAYE,KAAb,CAAkBjE,UAAWsD,EAAWuB,KAAK,IAA7C,oBAAwD,cAACM,EAAA,EAAD,CAAOZ,GAAG,YAAV,qBACxD,eAACR,EAAA,EAAYE,KAAb,CAAkBjE,UAAWsD,EAAWuB,KAAK,IAA7C,oBAAwD,cAACM,EAAA,EAAD,CAAOZ,GAAG,YAAV,6BAI/DrB,EACAF,EACD,cAACd,EAAA,EAAD,CAAQlC,UAAU,OAAOmC,QAAQ,UACjCC,QAAS,kBAAKiD,OAAOC,KAAK,qDAAsD,WADhF,6BAIC5C,GACA,cAAC,EAAD,CACG6C,KAAM7C,EACNvC,OAAQ,WACJ0C,GAAa,GACbF,GAAa,IAEjBzB,aAAc,SAAAwD,GAAE,OAAIrB,EAAcqB,MAErC5B,GAAc,cAAC,EAAD,CACXyC,KAAMzC,EACNyB,GAAIb,EACJvD,OAAQ,kBAAK4C,GAAa,IAC1ByC,MAAO,IACP/E,IAAK+C,YCvIV,MAA0B,gC,6LC0V1BiC,EA1UC,WACZ,OACI,qCAEI,yBAASf,GAAG,OAAO1E,UAAU,4BAA7B,SACI,eAAC2E,EAAA,EAAD,WACI,kDAAoB,4CACpB,mGACA,qBAAK3E,UAAU,SAAf,SACI,mBAAG6E,KAAK,SAAS7E,UAAU,2BAA3B,gCAKZ,uBAAM0E,GAAG,OAAT,UAEI,yBAASA,GAAG,oBAAoB1E,UAAU,oBAA1C,SACI,cAAC2E,EAAA,EAAD,UACI,eAACe,EAAA,EAAD,WACA,qBAAK1F,UAAU,4DAAf,SACI,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,OAAf,SAAsB,mBAAGA,UAAU,kBAAb,SAA+B,cAAC,IAAD,QACrD,oBAAIA,UAAU,QAAd,0BACA,mBAAGA,UAAU,cAAb,yFAIR,qBAAKA,UAAU,4DAAf,SACI,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,OAAf,SAAsB,mBAAGA,UAAU,aAAb,SAA0B,cAAC,IAAD,QAChD,oBAAIA,UAAU,QAAd,0BACA,mBAAGA,UAAU,cAAb,oHAIR,qBAAKA,UAAU,4DAAf,SACI,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,OAAf,SAAsB,mBAAGA,UAAU,mBAAb,SAAgC,cAAC,IAAD,QACtD,oBAAIA,UAAU,QAAd,6BACA,mBAAGA,UAAU,cAAb,8GAIR,qBAAKA,UAAU,4DAAf,SACI,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,OAAf,SAAsB,mBAAGA,UAAU,cAAb,SAA2B,cAAC,IAAD,QACjD,oBAAIA,UAAU,QAAd,uBACA,mBAAGA,UAAU,cAAb,kGAQhB,yBAAS0E,GAAG,QAAQ1E,UAAU,mBAA9B,SACI,eAAC2E,EAAA,EAAD,WACI,sBAAK3E,UAAU,gBAAf,UACI,uCACA,gDAAkB,+CAClB,kIAEJ,eAAC0F,EAAA,EAAD,WACA,qBAAK1F,UAAU,WAAf,SACI,qBAAKM,IAAKqF,EAAK3F,UAAU,YAAYO,IAAI,OAE7C,sBAAKP,UAAU,0EAAf,UACI,uBACA,mBAAGA,UAAU,aAAb,+OAIA,+BACA,+BACI,mBAAGA,UAAU,oBACb,gCACA,6CACA,qJAGJ,+BACI,mBAAGA,UAAU,iBACb,gCACA,gDACA,4JAIJ,wPAUZ,yBAAS0E,GAAG,SAAS1E,UAAU,SAA/B,SACI,cAAC2E,EAAA,EAAD,UACI,eAACe,EAAA,EAAD,WACA,qBAAK1F,UAAU,oBAAf,SACI,sBAAKA,UAAU,YAAf,UACI,4BAAG,cAAC,IAAD,MACH,sBAAM0E,GAAG,aAAT,iBACA,2DAIR,qBAAK1E,UAAU,iCAAf,SACI,sBAAKA,UAAU,YAAf,UACI,4BAAG,cAAC,IAAD,MACH,sBAAM0E,GAAG,eAAT,iBACA,qDAIR,qBAAK1E,UAAU,iCAAf,SACI,sBAAKA,UAAU,YAAf,UACI,4BAAG,cAAC,IAAD,MACH,sBAAM0E,GAAG,WAAT,iBACA,gDAIR,qBAAK1E,UAAU,iCAAf,SACI,sBAAKA,UAAU,YAAf,UACI,4BAAG,cAAC,IAAD,MACH,sBAAM0E,GAAG,aAAT,iBACA,yDAUhB,yBAASA,GAAG,WAAW1E,UAAU,WAAjC,SACI,eAAC2E,EAAA,EAAD,WAEI,sBAAK3E,UAAU,gBAAf,UACA,0CACA,4CAAc,+CACd,0GAGA,eAAC0F,EAAA,EAAD,WACA,qBAAK1F,UAAU,+CAA+C,WAAS,UAAvE,SACI,sBAAKA,UAAU,WAAf,UACA,qBAAKA,UAAU,OAAf,SAAsB,4BAAG,cAAC,IAAD,QACzB,oCACA,yGAIJ,qBAAKA,UAAU,4DAA4D,WAAS,UAApF,SACI,sBAAKA,UAAU,WAAf,UACA,qBAAKA,UAAU,OAAf,SAAsB,4BAAG,cAAC,IAAD,QACzB,oCACA,qGAIJ,qBAAKA,UAAU,4DAA4D,WAAS,UAApF,SACI,sBAAKA,UAAU,WAAf,UACA,qBAAKA,UAAU,OAAf,SAAsB,4BAAG,cAAC,IAAD,QACzB,qCACA,0HAIJ,qBAAKA,UAAU,oDAAoD,WAAS,UAA5E,SACI,sBAAKA,UAAU,WAAf,UACA,qBAAKA,UAAU,OAAf,SAAsB,4BAAG,cAAC,IAAD,QACzB,6CACA,+GAIJ,qBAAKA,UAAU,oDAAoD,WAAS,UAA5E,SACI,sBAAKA,UAAU,WAAf,UACA,qBAAKA,UAAU,OAAf,SAAsB,4BAAG,cAAC,IAAD,QACzB,yCACA,oGAIJ,qBAAKA,UAAU,oDAAoD,WAAS,UAA5E,SACI,sBAAKA,UAAU,WAAf,UACA,qBAAKA,UAAU,OAAf,SAAsB,4BAAG,cAAC,IAAD,QACzB,yCACA,8GAUZ,yBAAS0E,GAAG,MAAM1E,UAAU,iBAA5B,SACI,eAAC2E,EAAA,EAAD,WACI,sBAAK3E,UAAU,gBAAf,UACI,uCACA,mDAAqB,gDACrB,8FAGJ,qBAAKA,UAAU,6BAAf,SACI,qBAAKA,UAAU,YAAf,SACI,eAAC4F,EAAA,EAAD,WACI,eAACA,EAAA,EAAU3B,KAAX,CAAgB4B,SAAS,IAAI7F,UAAU,OAAvC,UACI,cAAC4F,EAAA,EAAUvF,OAAX,CAAkBL,UAAU,WAA5B,uCACA,cAAC4F,EAAA,EAAUpF,KAAX,8CAIJ,eAACoF,EAAA,EAAU3B,KAAX,CAAgB4B,SAAS,IAAI7F,UAAU,OAAvC,UACI,cAAC4F,EAAA,EAAUvF,OAAX,CAAkBL,UAAU,WAA5B,yCACA,cAAC4F,EAAA,EAAUpF,KAAX,uGAIJ,eAACoF,EAAA,EAAU3B,KAAX,CAAgB4B,SAAS,IAAI7F,UAAU,OAAvC,UACI,cAAC4F,EAAA,EAAUvF,OAAX,CAAkBL,UAAU,WAA5B,8CACA,cAAC4F,EAAA,EAAUpF,KAAX,kDAIJ,eAACoF,EAAA,EAAU3B,KAAX,CAAgB4B,SAAS,IAAI7F,UAAU,OAAvC,UACI,cAAC4F,EAAA,EAAUvF,OAAX,CAAkBL,UAAU,WAA5B,uDACA,cAAC4F,EAAA,EAAUpF,KAAX,8DAIJ,eAACoF,EAAA,EAAU3B,KAAX,CAAgB4B,SAAS,IAAI7F,UAAU,OAAvC,UACI,cAAC4F,EAAA,EAAUvF,OAAX,CAAkBL,UAAU,WAA5B,wDACA,cAAC4F,EAAA,EAAUpF,KAAX,mHAIJ,eAACoF,EAAA,EAAU3B,KAAX,CAAgB4B,SAAS,IAAI7F,UAAU,OAAvC,UACI,cAAC4F,EAAA,EAAUvF,OAAX,CAAkBL,UAAU,WAA5B,wBACA,cAAC4F,EAAA,EAAUpF,KAAX,0EAYxB,yBAASkE,GAAG,UAAU1E,UAAU,UAAhC,SACI,eAAC2E,EAAA,EAAD,WACI,sBAAK3E,UAAU,gBAAf,UACI,yCACA,6BAAI,gDACJ,+DAEJ,cAAC0F,EAAA,EAAD,UACI,qBAAK1F,UAAU,YAAf,SACI,sBAAKA,UAAU,gBAAf,UACA,mBAAGA,UAAU,YAAb,SAAyB,cAAC,IAAD,MACzB,2CACA,+HACkG,uBAC9F,mBAAG6E,KAAK,gGAAR,kCAOZ,eAACa,EAAA,EAAD,WACI,qBAAK1F,UAAU,oBAAf,SACI,sBAAKA,UAAU,iBAAf,UACA,mBAAGA,UAAU,iBAAb,SAA8B,cAAC,IAAD,MAC9B,0CACA,iEAGJ,qBAAKA,UAAU,oBAAf,SACI,sBAAKA,UAAU,iBAAf,UACA,mBAAGA,UAAU,mBAAb,SAAgC,cAAC,IAAD,MAChC,yCACA,sDAGJ,qBAAKA,UAAU,WAAf,SACI,uBAAM8F,OAAO,oBAAoBC,OAAO,OAAOC,KAAK,OAAOhG,UAAU,iBAArE,UACA,eAAC0F,EAAA,EAAD,WACI,qBAAK1F,UAAU,iBAAf,SACC,uBAAO8B,KAAK,OAAOmE,KAAK,OAAOjG,UAAU,eAAe0E,GAAG,OAAO1C,YAAY,YAAYkE,UAAQ,MAEnG,qBAAKlG,UAAU,iBAAf,SACC,uBAAO8B,KAAK,QAAQ9B,UAAU,eAAeiG,KAAK,QAAQvB,GAAG,QAAQ1C,YAAY,aAAakE,UAAQ,SAG3G,qBAAKlG,UAAU,aAAf,SACK,uBAAO8B,KAAK,OAAO9B,UAAU,eAAeiG,KAAK,UAAUvB,GAAG,UAAU1C,YAAY,UAAUkE,UAAQ,MAE3G,qBAAKlG,UAAU,aAAf,SACI,0BAAUA,UAAU,eAAeiG,KAAK,UAAUE,KAAK,IAAInE,YAAY,UAAUkE,UAAQ,MAE7F,sBAAKlG,UAAU,OAAf,UACI,qBAAKA,UAAU,UAAf,qBACA,qBAAKA,UAAU,kBACf,qBAAKA,UAAU,eAAf,uDAEJ,cAACoG,EAAA,EAAD,CAAgBC,QAAS,cAACC,EAAA,EAAD,CAAS5B,GAAG,mBAAZ,kBAAzB,SACI,sBAAM1E,UAAU,iBAAhB,SACA,qBAAKA,UAAU,cAAf,SAA6B,wBAAQ8B,KAAK,SAAb,oD,2DC/PlDG,GAjEA,WACX,OACI,mCACI,yBAAQyC,GAAG,SAAX,UACI,qBAAK1E,UAAU,aAAf,SACA,cAAC2E,EAAA,EAAD,UACI,eAACe,EAAA,EAAD,WACA,sBAAK1F,UAAU,mCAAf,UACI,uCAAS,4CACT,8DACiC,uBADjC,6BAE8B,uBAAS,uBACnC,4CAHJ,oBAG4C,uBACxC,4CAJJ,+BAIuD,6BAG3D,sBAAKA,UAAU,iCAAf,UACI,8CACA,+BACI,+BAAI,4BAAG,cAAC,IAAD,MAAoB,mBAAG6E,KAAK,QAAR,qBAC3B,+BAAI,4BAAG,cAAC,IAAD,MAAoB,mBAAGA,KAAK,SAAR,yBAC3B,+BAAI,4BAAG,cAAC,IAAD,MAAoB,mBAAGA,KAAK,YAAR,+BAGnC,sBAAK7E,UAAU,iCAAf,UACI,qDACA,yDACA,sBAAKA,UAAU,oBAAf,UACA,mBAAG6E,KAAK,qCAAqC7E,UAAU,UAAvD,SAAiE,mBAAGA,UAAU,iBAAb,SAA8B,cAAC,KAAD,QAC/F,cAACoG,EAAA,EAAD,CAAgBC,QAAS,cAACC,EAAA,EAAD,CAAS5B,GAAG,mBAAZ,kBAAzB,SACI,sBAAM1E,UAAU,iBAAhB,SACI,mBAAG6E,KAAK,IAAIX,MAAO,CAAEqC,cAAe,QAApC,SAA8C,4BAAG,cAAC,KAAD,YAGzD,cAACH,EAAA,EAAD,CAAgBC,QAAS,cAACC,EAAA,EAAD,CAAS5B,GAAG,mBAAZ,kBAAzB,SACI,sBAAM1E,UAAU,iBAAhB,SACA,mBAAG6E,KAAK,IAAIX,MAAO,CAAEqC,cAAe,QAApC,SAA8C,4BAAG,cAAC,KAAD,YAGrD,cAACH,EAAA,EAAD,CAAgBC,QAAS,cAACC,EAAA,EAAD,CAAS5B,GAAG,mBAAZ,kBAAzB,SACI,sBAAM1E,UAAU,iBAAhB,SACI,mBAAG6E,KAAK,IAAIX,MAAO,CAAEqC,cAAe,QAApC,SAA8C,4BAAG,cAAC,KAAD,YAGzD,cAACH,EAAA,EAAD,CAAgBC,QAAS,cAACC,EAAA,EAAD,CAAS5B,GAAG,mBAAZ,kBAAzB,SACI,sBAAM1E,UAAU,iBAAhB,SACI,mBAAG6E,KAAK,IAAIX,MAAO,CAAEqC,cAAe,QAApC,SAA8C,4BAAG,cAAC,KAAD,yBASjE,qBAAKvG,UAAU,iBAAf,SACI,sBAAKA,UAAU,YAAf,4BACqB,iCAAQ,gDAD7B,mCCpDLwG,GAVG,SAACC,GACf,OACI,qCACI,cAAC,EAAD,CAAYlE,OAAQkE,IACpB,cAAC,EAAD,CAAajE,OAAQiE,EAAIjE,SACzB,cAAC,GAAD,Q,uCCXNkE,GAAOC,EAAQ,KAEfC,G,aACF,aAAe,IAAD,gCAYdC,KAZc,wBAYP,uBAAAC,EAAA,sEACG,EAAKC,UADR,OAGC,EAAKC,aACLC,QAAQC,IAAI,4BAEZ,EAAKC,WAAaC,KAAKC,MAAMD,KAAKE,UAAUC,KAExC,EAAKJ,WAAWK,aAAe,EAAKL,WAAWK,YAAYC,MAC3D,EAAKC,OAAShB,GAAKiB,OAAOC,SAAS,EAAKT,WAAWK,YAAYC,MAC/D,EAAKI,kBAAkB,wCAUvB,EAAKC,cAAe,EACpB,EAAKC,aAAe,2CAGxB,EAAKD,cAAe,EACpB,EAAKC,aAAe,oCAzBrB,2CAZO,KA+CdhB,QA/Cc,wBA+CJ,uBAAAD,EAAA,sEACA,EAAKkB,OAAOjB,UAAUkB,MAAK,WAC7B,EAAKjB,YAAc,EAAKkB,uBAFtB,2CA/CI,KAyDdA,kBAAoB,WAChB,OAAO,EAAKF,OAAOhB,eA1DT,KA6DdnD,eAAiB,SAACjD,GACd,OAAO8F,GAAKyB,sBAAsBvH,IA9DxB,KAkEdwH,UAlEc,wBAkEF,+BAAAtB,EAAA,6DACFuB,EAAc3B,GAAKiB,OAAOC,SAAS,mCADjC,SAGe,EAAKI,OAAOM,QAAQ,CACvC,QAAW,eACX,QAAWD,EAAYzH,QACvB,aAAgB,cANZ,OAGF2H,EAHE,OASRtB,QAAQC,IAAIqB,EAAUF,GATd,2CAlEE,KAsFdG,qBAtFc,yCAsFS,WAAM5H,GAAN,gBAAAkG,EAAA,sEACG,EAAKkB,OAAOS,cAAc7H,GAD7B,cACb8H,EADa,yBAEZA,GAFY,2CAtFT,2DAiGdC,YAjGc,yCAiGA,WAAM/H,GAAN,kBAAAkG,EAAA,0DACN,EAAKgB,aADC,uBAENb,QAAQC,IAAI,WAAa,EAAKa,cAFxB,iCAMNa,EAAW,EAAKC,cAEhBjI,IACAgI,EAAWhI,GATL,SAYQ,EAAKoH,OAAOW,YAAYC,GAZhC,cAYJE,EAZI,yBAaHA,GAbG,2CAjGA,2DAqHdC,WArHc,wBAqHD,iCAAAjC,EAAA,sEACyB,EAAKkB,OAAOe,aADrC,uBACDrB,EADC,EACDA,OAAQgB,EADP,EACOA,QADP,kBAGF,CAAEhB,SAAQgB,YAHR,2CArHC,KAiIdM,WAAa,WACT,EAAKhB,OAAOgB,cAlIF,KAqIdC,YArIc,yCAqIA,WAAMrI,EAASsI,GAAf,wBAAApC,EAAA,6DACJqC,EAAS,CACX,gBAAmB,UACnB,QAAW,qCACX,OAAUzC,GAAK0C,WAAW,IAC1B,YAAexI,GALT,SAQa,EAAKyI,SAASF,GAR3B,cAQJG,EARI,OASJC,EAAaD,EAASE,mBAC5BvC,QAAQC,IAAI,qCAAsCoC,GAClDrC,QAAQC,IAAI,oBAAqBoC,EAASG,IAAK,OAC/CxC,QAAQC,IAAI,oCAAqCqC,GAE3CG,EAAS,EAAKhC,OAAOiC,KAAKL,GAChCrC,QAAQC,IAAI,oBAAqBwC,EAAOE,MACxC3C,QAAQC,IAAI,eAAgBwC,EAAOG,SAhBzB,UAkBO,EAAKC,kBAAkBJ,EAAOG,SAlBrC,QAkBJE,EAlBI,OAmBV9C,QAAQC,IAAI,sBAAuB6C,EAAGC,OAAOC,KAAKC,mBAClDjD,QAAQC,IAAI,mBAAoBE,KAAKE,UAAUZ,GAAKyD,kBAAkBJ,EAAGC,OAAOC,MAAO,KAAM,IApBnF,4CArIA,6DA4JdG,aA5Jc,yCA4JC,WAAMxJ,GAAN,wBAAAkG,EAAA,6DACLqC,EAAS,CACX,gBAAmB,WACnB,QAAWvI,EACX,YAAe,CACX,SAAY,MACZ,OAAUA,EACV,MAAS,eAEb,MAAS,CACL,eAAiB,IAVd,SAcY,EAAKyI,SAASF,GAd1B,cAcLG,EAdK,OAeLC,EAAaD,EAASE,mBAC5BvC,QAAQC,IAAI,qCAAsCoC,GAClDrC,QAAQC,IAAI,oCAAqCqC,GAE3CG,EAAS,EAAKhC,OAAOiC,KAAKL,GAChCrC,QAAQC,IAAI,oBAAqBwC,EAAOE,MACxC3C,QAAQC,IAAI,eAAgBwC,EAAOG,SArBxB,UAuBM,EAAKC,kBAAkBJ,EAAOG,SAvBpC,QAuBLE,EAvBK,OAwBX9C,QAAQC,IAAI,sBAAuB6C,EAAGC,OAAOC,KAAKC,mBAClDjD,QAAQC,IAAI,mBAAoBE,KAAKE,UAAUZ,GAAKyD,kBAAkBJ,EAAGC,OAAOC,MAAO,KAAM,IAzBlF,4CA5JD,2DAkMdZ,SAAW,SAACgB,EAAaC,GAErB,OADiB,EAAKtC,OAAOuC,SAASF,IAnM5B,KAuMdP,kBAvMc,yCAuMM,WAAMO,GAAN,gBAAAvD,EAAA,sEACO,EAAKkB,OAAOwC,cAAcH,GADjC,cACV9B,EADU,yBAGTA,GAHS,2CAvMN,2DA6MdkC,kBA7Mc,yCA6MM,WAAM7J,GAAN,gBAAAkG,EAAA,sEACO,EAAKkB,OAAO0C,WAAW,CAC1C,QAAW9J,EACX,QAAW,qBAHC,OACV2H,EADU,OAMhBtB,QAAQC,IAAI,WAAYqB,GANR,2CA7MN,2DAsNdoC,gBAtNc,yCAsNI,WAAM/J,GAAN,gBAAAkG,EAAA,sEACS,EAAKkB,OAAO0C,WAAW,CAC1C,QAAW9J,EACX,QAAW,kBAHD,OACR2H,EADQ,OAMdtB,QAAQC,IAAI,WAAYqB,GANV,2CAtNJ,2DA+NdqC,eA/Nc,yCA+NG,WAAMhK,GAAN,gBAAAkG,EAAA,sEACU,EAAKkB,OAAOM,QAAQ,CACvC,QAAW1H,EACX,QAAW,iBAHF,OACP2H,EADO,OAMbtB,QAAQC,IAAI,WAAYqB,GANX,2CA/NH,2DAwOdsC,qBAxOc,yCAwOS,WAAMjK,GAAN,gBAAAkG,EAAA,sEACI,EAAKkB,OAAOM,QAAQ,CACvC,QAAW1H,EACX,QAAW,uBAHI,OACb2H,EADa,OAMnBtB,QAAQC,IAAI,WAAYqB,GANL,2CAxOT,2DAiPdV,kBAjPc,yCAiPM,WAAMjH,GAAN,gBAAAkG,EAAA,sEACO,EAAKkB,OAAO0C,WAAW,CAC1C,QAAW9J,EACX,QAAW,oBAHC,OACV2H,EADU,OAMhBtB,QAAQC,IAAI,WAAYqB,GANR,2CAjPN,2DA0PduC,cA1Pc,wBA0PE,6BAAAhE,EAAA,sEACW,EAAKkB,OAAOM,QAAQ,CACvC,QAAW,gBAFH,OACNC,EADM,OAKZtB,QAAQC,IAAI,WAAYqB,GALZ,2CA1PF,KAkQdwC,UAlQc,wBAkQF,6BAAAjE,EAAA,sEACe,EAAKkB,OAAOM,QAAQ,CACvC,QAAW,WAFP,OACFC,EADE,OAKRtB,QAAQC,IAAI,WAAYqB,GALhB,2CAjQRnH,KAAK4J,cAAgB,yBACrB5J,KAAK4G,OAAS,IAAItB,GAAKuE,OAAO7J,KAAK4J,eACnC5J,KAAKsG,OAAS,KACdtG,KAAK4F,aAAc,EACnB5F,KAAK+F,WAAa,KAClB/F,KAAK0G,cAAe,EACpB1G,KAAK2G,aAAe,GACpB3G,KAAKkH,QAAU,GACflH,KAAKgC,WAAa,MAkQXwD,MCxMAsE,G,kDAlCX,WAAYrL,GAAQ,IAAD,8BACf,cAAMA,IAEDc,MAAQ,CACXC,QAAS,GACT4B,OAAQ,IAAIoE,IALC,E,sDASnB,SAAmBuE,EAAWC,GAC1BnE,QAAQC,IAAI9F,KAAKT,MAAOyK,EAAWD,K,oBAGvC,WAAU,IAAD,OACL,OACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,IAAIC,QAClB,cAAC,GAAD,CACI/I,OAAQpB,KAAKT,MAAM6B,OACnBgJ,cAAe,SAAA9G,GAAE,OAAI,EAAK3D,SAAS,CAAEH,QAAS8D,KAC9C+G,IAAKrK,KAAKT,MAAMC,kB,GArBlByB,aCrBPqJ,OAVf,WACE,OACE,qBAAK1L,UAAY,MAAjB,SACE,cAAC,IAAD,UACE,cAAC,GAAD,SCGO2L,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5D,MAAK,YAAkD,IAA/C6D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.1d26f1c9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState, useEffect, Component} from \"react\";\r\nimport {\r\n    Nav, \r\n    Navbar, \r\n    NavDropdown, \r\n    Badge, \r\n    Container, \r\n    Modal,\r\n    Button,\r\n    ToastContainer,\r\n    Toast,\r\n    Form\r\n} from 'react-bootstrap'\r\n\r\nimport {\r\n    PersonWorkspace\r\n} from 'react-bootstrap-icons'\r\n\r\n\r\nconst Alert = (props) => {\r\n    return (\r\n        <ToastContainer position=\"top-end\" className=\"p-3\" >\r\n            <Toast \r\n            {...props}\r\n            onClose={props.onHide} \r\n            autohide>\r\n                <Toast.Header>\r\n                <img\r\n                    src=\"holder.js/20x20?text=%20\"\r\n                    className=\"rounded me-2\"\r\n                    alt=\"\"\r\n                />\r\n                <strong className=\"me-auto\">Notification!</strong>\r\n                </Toast.Header>\r\n                <Toast.Body>{props.msg}</Toast.Body>\r\n            </Toast>\r\n      </ToastContainer>\r\n    );\r\n}\r\n\r\nconst Header = (props) => {\r\n    const [ledgerInstance, setLedger] = useState(props.events.ledger);\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [submitted, setSubmitted] = useState(false);\r\n    const [alertShow, setAlertShow] = useState(false);\r\n    const [textAddress, setTextAddress] = useState(null);\r\n    const [buttonHide, setButtonHide] = useState(null);\r\n    const [xrpAddress, setXrpAddress] = useState(\"\");\r\n    const [hideGames, setHideGame] = useState(null);\r\n    const [errorMsg, setErrorMsg] = useState(\"\");\r\n    const [errorColor, setErrorColor] = useState(\"info\")\r\n\r\n    useEffect(() => {\r\n        if (submitted && xrpAddress !== \"\") {\r\n           if (ledgerInstance.isValidAddress(xrpAddress)) {\r\n                const image = (\r\n                    <NavDropdown title={<PersonWorkspace />}>\r\n                        <NavDropdown.Item>\r\n                            <p style={{fontSize:\"14px\"}}>{xrpAddress}</p>\r\n                        </NavDropdown.Item>\r\n                    </NavDropdown>\r\n                );\r\n                setTextAddress(image);\r\n                setButtonHide(null);\r\n                setHideGame(\"navLink disabled\");\r\n\r\n                setAlertShow(true);\r\n                setErrorColor(\"info\");\r\n                setErrorMsg( \"Address is valid!\");  \r\n\r\n                localStorage.setItem('xrpAddress', xrpAddress);\r\n\r\n                //props.events.handleAddress(xrpAddress);\r\n           } else {\r\n                setAlertShow(true);\r\n                setErrorColor(\"warning\");\r\n                setErrorMsg( \"Address `\" + xrpAddress+ \"` is not valid\");\r\n           }\r\n        }\r\n\r\n        if (!submitted && xrpAddress === \"\") {\r\n            const image = (\r\n                <Button variant=\"primary\" onClick={() => setModalShow(true)}>\r\n                    Sign in\r\n                </Button>\r\n            );\r\n            setButtonHide(image);\r\n            setTextAddress(null);\r\n            setHideGame(\"navLink disabled\")\r\n        }\r\n    }, [xrpAddress, ledgerInstance, submitted, props.events]);    \r\n\r\n    return (\r\n        <>\r\n         <Navbar bg=\"light\" variant=\"light\" expand=\"lg\" fixed=\"top\" id=\"nav\">\r\n            <Container className=\"px-lg-3\">\r\n                <Navbar.Brand className=\"navName\" href=\"#!\">Micro<span>World</span></Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"navbarSupportedContent\" />\r\n                <Navbar.Collapse id=\"navbarSupportedContent\">\r\n                <Nav className=\"ms-auto mb-2 mb-lg-0\">\r\n                    <Nav.Link className=\"navLink\" href=\"#home\">Home</Nav.Link>\r\n                    <Nav.Link className=\"navLink\" href=\"#about\">About</Nav.Link>\r\n                    <Nav.Link className=\"navLink\" href=\"#services\">Services</Nav.Link>\r\n                    <Nav.Link className=\"navLink\" href=\"#contact\">Contact</Nav.Link>\r\n                    <NavDropdown className=\"navLink\" title=\"Others\" id=\"basic-nav-dropdown\">\r\n                        <NavDropdown.Item className=\"navLink\" disabled href=\"#action/3.2\">Whitepaper <Badge bg=\"secondary\">Soon</Badge></NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item className={hideGames} href=\"/RabbitRun\">Rabbit Run <Badge bg=\"secondary\">Development</Badge></NavDropdown.Item>\r\n                        <NavDropdown.Item className={hideGames} href=\"#\">2D - 2 <Badge bg=\"secondary\">Soon</Badge></NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item className={hideGames} href=\"#\">3D - 1 <Badge bg=\"secondary\">Soon</Badge></NavDropdown.Item>\r\n                        <NavDropdown.Item className={hideGames} href=\"#\">3D - 2 <Badge bg=\"secondary\">Soon</Badge></NavDropdown.Item>\r\n                    </NavDropdown>\r\n                </Nav>\r\n                </Navbar.Collapse>\r\n                {buttonHide}\r\n                {textAddress}\r\n                <Button className=\"mx-1\" variant=\"success\" \r\n                onClick={()=> window.open(\"https://gleam.io/0MJQU/micro-world-airdrop-listing\", \"_blank\")}>\r\n                    Airdrop Listing\r\n                </Button>\r\n                {modalShow &&\r\n                (<ModalForm\r\n                    show={modalShow}\r\n                    onHide={() => {\r\n                        setSubmitted(true);\r\n                        setModalShow(false);\r\n                    }}\r\n                    handleSubmit={id => setXrpAddress(id)}\r\n                />) }\r\n                {alertShow && (<Alert\r\n                    show={alertShow}\r\n                    bg={errorColor}\r\n                    onHide={()=> setAlertShow(false)}\r\n                    delay={3000}\r\n                    msg={errorMsg}\r\n                />)}\r\n            </Container>\r\n        </Navbar>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nclass ModalForm extends Component {\r\n\r\n    state={ address: null }\r\n  \r\n    handleChange = (e) => this.setState({address: e.target.value})\r\n    handleSubmit = () => {\r\n        this.props.handleSubmit(this.state.address);\r\n        this.props.onHide();\r\n    }\r\n  \r\n    render(){\r\n      return(\r\n        <Modal \r\n            {...this.props}\r\n            size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            backdrop=\"static\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>MicroWorld</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Group >\r\n                    <Form.Label>XRP Address: </Form.Label>\r\n                    <Form.Control type=\"text\" onChange={this.handleChange} placeholder=\"Enter XRP Address\"/>           \r\n                </Form.Group>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>\r\n                    Submit\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n      )\r\n    }\r\n}\r\n\r\n\r\nexport default Header;","export default __webpack_public_path__ + \"static/media/xrp.28f9efb8.jpg\";","import React from \"react\";\r\nimport img from './xrp.jpg'\r\nimport {\r\n    Container, \r\n    Row, \r\n    Accordion,\r\n    OverlayTrigger,\r\n    Tooltip\r\n} from 'react-bootstrap'\r\nimport {\r\n    Telephone, Envelope, UpcScan,\r\n    People, CashCoin, Controller, Wrench, Fan, \r\n    Bicycle, FileEasel, Coin, CurrencyDollar, \r\n    Book, Box, Check2Circle, Clock, HeadsetVr\r\n} from 'react-bootstrap-icons';\r\n\r\nconst Content = () => {\r\n    return (\r\n        <>\r\n             {/* DONE */}\r\n            <section id=\"home\" className=\"d-flex align-items-center\">\r\n                <Container>\r\n                    <h1>Welcome to Micro<span>World</span></h1>\r\n                    <h2>Developed for XRP Ledger where you can earn tokens while playing.</h2>\r\n                    <div className=\"d-flex\">\r\n                        <a href=\"#about\" className=\"btn-get-started scrollto\">Get Started</a>\r\n                    </div>\r\n                </Container>\r\n            </section>\r\n\r\n            <main id=\"main\">\r\n                 {/* DONE */}\r\n                <section id=\"featured-services\" className=\"featured-services\">\r\n                    <Container >\r\n                        <Row>\r\n                        <div className=\"col-md-6 col-lg-3 d-flex align-items-stretch mb-5 mb-lg-0\">\r\n                            <div className=\"icon-box\" >\r\n                                <div className=\"icon\"><i className=\"bx bxl-dribbble\"><HeadsetVr/></i></div>\r\n                                <h4 className=\"title\">Free to Play</h4>\r\n                                <p className=\"description\">Microgame has the option of allowing its users to play without paying.</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-6 col-lg-3 d-flex align-items-stretch mb-5 mb-lg-0\">\r\n                            <div className=\"icon-box\"  >\r\n                                <div className=\"icon\"><i className=\"bx bx-file\"><Box/></i></div>\r\n                                <h4 className=\"title\">Play to Earn</h4>\r\n                                <p className=\"description\">Microgame provides its users with a chance to earn in-game tokens and exchange them in DEXX Tool.</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-6 col-lg-3 d-flex align-items-stretch mb-5 mb-lg-0\">\r\n                            <div className=\"icon-box\"  >\r\n                                <div className=\"icon\"><i className=\"bx bx-tachometer\"><Clock/></i></div>\r\n                                <h4 className=\"title\">Passive Earning</h4>\r\n                                <p className=\"description\">Microgame allows its users to earn money in a manner that does not require too much effort.</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-6 col-lg-3 d-flex align-items-stretch mb-5 mb-lg-0\">\r\n                            <div className=\"icon-box\"  >\r\n                                <div className=\"icon\"><i className=\"bx bx-world\"><Check2Circle/></i></div>\r\n                                <h4 className=\"title\">Easy Game</h4>\r\n                                <p className=\"description\">Microgame gives you an enjoyable game to play and earn at the same time.</p>\r\n                            </div>\r\n                        </div>\r\n                        </Row>\r\n                    </Container>\r\n                </section>\r\n                \r\n                 {/* DONE */}\r\n                <section id=\"about\" className=\"about section-bg\">\r\n                    <Container >\r\n                        <div className=\"section-title\">\r\n                            <h2>About</h2>\r\n                            <h3>Find Out More <span>About Us</span></h3>\r\n                            <p>Here at MicroWorld Project, we plan to create 2D and 3D microgames where anyone can play them.</p>\r\n                        </div>\r\n                        <Row>\r\n                        <div className=\"col-lg-6\" >\r\n                            <img src={img} className=\"img-fluid\" alt=\"\"></img>\r\n                        </div>\r\n                        <div className=\"col-lg-6 pt-4 pt-lg-0 content d-flex flex-column justify-content-center\"  >\r\n                            <h3></h3>\r\n                            <p className=\"fst-italic\">\r\n                            We saw the fast and strongly growing community of NFTs, Metaverses, and the P2E industry.\r\n                             As we know that XRPL hasn't started releasing the NFT support then we developed a Free-to-earn project in our community to earn tokens.\r\n                            </p>\r\n                            <ul>\r\n                            <li>\r\n                                <i className=\"bx bx-store-alt\"></i>\r\n                                <div>\r\n                                <h5>Earn tokens</h5>\r\n                                <p>You can earn a $XMW token when playing but the amount is not yet discussed since we all have a limited supply.</p>\r\n                                </div>  \r\n                            </li>\r\n                            <li>\r\n                                <i className=\"bx bx-images\"></i>\r\n                                <div>\r\n                                <h5>Game mechanics</h5>\r\n                                <p>You can play the game/s once a day. There is a reset mechanism to know whose users have not yet and done playing. </p>\r\n                                </div>\r\n                            </li>\r\n                            </ul>\r\n                            <p>\r\n                            Stay tuned to our websites and social networks for more news and updates regarding our growing project and community.\r\n                            Just stay and hold $XRP tokens. We will go to the moon sooner just follow the timeline\r\n                            </p>\r\n                        </div>\r\n                        </Row>\r\n                    </Container>\r\n                </section>\r\n                \r\n                 {/* include xrpl */}\r\n                <section id=\"counts\" className=\"counts\">\r\n                    <Container >\r\n                        <Row>\r\n                        <div className=\"col-lg-3 col-md-6\">\r\n                            <div className=\"count-box\">\r\n                                <i><Coin /></i>\r\n                                <span id=\"xrplTokens\">000</span>\r\n                                <p>Tokens Issued on XRPL</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 mt-5 mt-md-0\">\r\n                            <div className=\"count-box\">\r\n                                <i><People /></i>\r\n                                <span id=\"xmwTrustline\">000</span>\r\n                                <p>$XMW Trustlines</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 mt-5 mt-lg-0\">\r\n                            <div className=\"count-box\">\r\n                                <i><CurrencyDollar /></i>\r\n                                <span id=\"xmwPrice\">000</span>\r\n                                <p>$XMW Price</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-3 col-md-6 mt-5 mt-lg-0\">\r\n                            <div className=\"count-box\">\r\n                                <i><Book /></i>\r\n                                <span id=\"xmwBalance\">000</span>\r\n                                <p>$XMW Balance</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        </Row>\r\n\r\n                    </Container>\r\n                </section>\r\n                \r\n                {/* DONE */}\r\n                <section id=\"services\" className=\"services\">\r\n                    <Container >\r\n\r\n                        <div className=\"section-title\">\r\n                        <h2>Services</h2>\r\n                        <h3>Check our <span>Services</span></h3>\r\n                        <p>Our projects are planned to develop different microgames here at XRPL.</p>\r\n                        </div>\r\n\r\n                        <Row>\r\n                        <div className=\"col-lg-4 col-md-6 d-flex align-items-stretch\" data-aos=\"zoom-in\" >\r\n                            <div className=\"icon-box\">\r\n                            <div className=\"icon\"><i><FileEasel/></i></div>\r\n                            <h4>2D</h4>\r\n                            <p>Here the player can run, jump, shoot, collect powers on a platform.</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-4 col-md-6 d-flex align-items-stretch mt-4 mt-md-0\" data-aos=\"zoom-in\" >\r\n                            <div className=\"icon-box\">\r\n                            <div className=\"icon\"><i><Fan/></i></div>\r\n                            <h4>3D</h4>\r\n                            <p>Interactive game which represented at three-dimensional space. </p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-4 col-md-6 d-flex align-items-stretch mt-4 mt-lg-0\" data-aos=\"zoom-in\" >\r\n                            <div className=\"icon-box\">\r\n                            <div className=\"icon\"><i><Bicycle/></i></div>\r\n                            <h4>FPS</h4>\r\n                            <p>Weapon-based combat and controlling the user character in a three-dimensional space.</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-4 col-md-6 d-flex align-items-stretch mt-4\" data-aos=\"zoom-in\" >\r\n                            <div className=\"icon-box\">\r\n                            <div className=\"icon\"><i><Controller/></i></div>\r\n                            <h4>Interaction</h4>\r\n                            <p>Easy game controls using keyboard and screen and user can earn instantly.</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-4 col-md-6 d-flex align-items-stretch mt-4\" data-aos=\"zoom-in\" >\r\n                            <div className=\"icon-box\">\r\n                            <div className=\"icon\"><i><CashCoin/></i></div>\r\n                            <h4>Payment</h4>\r\n                            <p>Send immediately the collected tokens after the game finished.</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-4 col-md-6 d-flex align-items-stretch mt-4\" data-aos=\"zoom-in\" >\r\n                            <div className=\"icon-box\">\r\n                            <div className=\"icon\"><i><Wrench/></i></div>\r\n                            <h4>Updates</h4>\r\n                            <p>Updates, corrections, and enhancements of game improves balance.</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        </Row>\r\n\r\n                    </Container>\r\n                </section>\r\n                \r\n                 {/* DONE */}\r\n                <section id=\"faq\" className=\"faq section-bg\">\r\n                    <Container >\r\n                        <div className=\"section-title\">\r\n                            <h2>F.A.Q</h2>\r\n                            <h3>Frequently Asked <span>Questions</span></h3>\r\n                            <p>Gives quick answers to customer questions about MicroWorld</p>\r\n                        </div>\r\n\r\n                        <div className=\"row justify-content-center\">\r\n                            <div className=\"col-xl-10\">\r\n                                <Accordion>\r\n                                    <Accordion.Item eventKey=\"0\" className=\"item\">\r\n                                        <Accordion.Header className=\"question\">What is MicroWorld token?</Accordion.Header>\r\n                                        <Accordion.Body>\r\n                                            The MicroWorld token is XMW.\r\n                                        </Accordion.Body>\r\n                                    </Accordion.Item>\r\n                                    <Accordion.Item eventKey=\"1\" className=\"item\">\r\n                                        <Accordion.Header className=\"question\">What is total token supply?</Accordion.Header>\r\n                                        <Accordion.Body>\r\n                                            The initially issued token is 10,000,000 XMW. It may change depending on the updates.\r\n                                        </Accordion.Body>\r\n                                    </Accordion.Item>\r\n                                    <Accordion.Item eventKey=\"2\" className=\"item\">\r\n                                        <Accordion.Header className=\"question\">Do I need to buy an NFT to earn?</Accordion.Header>\r\n                                        <Accordion.Body>\r\n                                            No NFT is needed for us to play.\r\n                                        </Accordion.Body>\r\n                                    </Accordion.Item>\r\n                                    <Accordion.Item eventKey=\"3\" className=\"item\">\r\n                                        <Accordion.Header className=\"question\">How many times I can play the microgames?</Accordion.Header>\r\n                                        <Accordion.Body>\r\n                                            Each user can play the microgame once a day.\r\n                                        </Accordion.Body>\r\n                                    </Accordion.Item>\r\n                                    <Accordion.Item eventKey=\"4\" className=\"item\">\r\n                                        <Accordion.Header className=\"question\">How many microgames are available to play?</Accordion.Header>\r\n                                        <Accordion.Body>\r\n                                            Currently, there is only one microgame, RabbitRun, available but the plan was at least 3-4 games.\r\n                                        </Accordion.Body>\r\n                                    </Accordion.Item>\r\n                                    <Accordion.Item eventKey=\"5\" className=\"item\">\r\n                                        <Accordion.Header className=\"question\">When moon?</Accordion.Header>\r\n                                        <Accordion.Body>\r\n                                            We go to the moon when XRP goes to the moon!\r\n                                        </Accordion.Body>\r\n                                    </Accordion.Item>\r\n                                </Accordion>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </Container>\r\n                </section>\r\n\r\n                 {/* DONE */}\r\n                <section id=\"contact\" className=\"contact\">\r\n                    <Container >\r\n                        <div className=\"section-title\">\r\n                            <h2>Contact</h2>\r\n                            <h3><span>Contact Us</span></h3>\r\n                            <p>Tell us the things you want</p>\r\n                        </div>\r\n                        <Row>\r\n                            <div className=\"col-lg-12\">\r\n                                <div className=\"info-box mb-4\">\r\n                                <i className=\"bx bx-map\"><UpcScan/></i>\r\n                                <h3>Trustline</h3>\r\n                                <p>\r\n                                    https://xumm.community/?issuer=ra2hRLUM28o9XYEHdyqKvFurXa5EYNqApE&currency=XMW&limit=10000000 <br />\r\n                                    <a href=\"https://xumm.community/?issuer=ra2hRLUM28o9XYEHdyqKvFurXa5EYNqApE&currency=XMW&limit=10000000\">Click Here</a>\r\n                                </p>\r\n                                \r\n                                </div>\r\n                            </div>\r\n                            \r\n                        </Row>\r\n                        <Row  >\r\n                            <div className=\"col-lg-3 col-md-6\">\r\n                                <div className=\"info-box  mb-4\">\r\n                                <i className=\"bx bx-envelope\"><Envelope/></i>\r\n                                <h3>Email Us</h3>\r\n                                <p>contactmicroworld@gmail.com</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-lg-3 col-md-6\">\r\n                                <div className=\"info-box  mb-4\">\r\n                                <i className=\"bx bx-phone-call\"><Telephone/></i>\r\n                                <h3>Call Us</h3>\r\n                                <p>+63 915 3421 385</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-lg-6\">\r\n                                <form action=\"forms/contact.php\" method=\"post\" role=\"form\" className=\"php-email-form\">\r\n                                <Row>\r\n                                    <div className=\"col form-group\">\r\n                                     <input type=\"text\" name=\"name\" className=\"form-control\" id=\"name\" placeholder=\"Your Name\" required />\r\n                                    </div>\r\n                                    <div className=\"col form-group\">\r\n                                     <input type=\"email\" className=\"form-control\" name=\"email\" id=\"email\" placeholder=\"Your Email\" required />\r\n                                    </div>\r\n                                </Row>\r\n                                <div className=\"form-group\">\r\n                                     <input type=\"text\" className=\"form-control\" name=\"subject\" id=\"subject\" placeholder=\"Subject\" required />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <textarea className=\"form-control\" name=\"message\" rows=\"3\" placeholder=\"Message\" required></textarea>\r\n                                </div>\r\n                                <div className=\"my-3\">\r\n                                    <div className=\"loading\">Loading</div>\r\n                                    <div className=\"error-message\"></div>\r\n                                    <div className=\"sent-message\">Your message has been sent. Thank you!</div>\r\n                                </div>\r\n                                <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">SOON</Tooltip>}>\r\n                                    <span className=\"d-inline-block\">\r\n                                    <div className=\"text-center\"><button type=\"submit\">Send Message</button></div>\r\n                                    </span>\r\n                                </OverlayTrigger>\r\n                                </form>\r\n                            </div>\r\n                        </Row>\r\n                    </Container>\r\n                </section>\r\n            </main>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Content;","import React from \"react\";\r\nimport {Container, Row, Tooltip, OverlayTrigger, Button } from 'react-bootstrap'\r\nimport {\r\n    ChevronRight,\r\n    Facebook, Twitter, Instagram, Telegram, Discord\r\n} from 'react-bootstrap-icons';\r\n\r\nconst renderTooltip = (props) => (\r\n    <Tooltip id=\"button-tooltip\" {...props}>\r\n      Soon\r\n    </Tooltip>\r\n);\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <>\r\n            <footer id=\"footer\">\r\n                <div className=\"footer-top\">\r\n                <Container>\r\n                    <Row>\r\n                    <div className=\"col-lg-4 col-md-6 footer-contact\">\r\n                        <h3>Micro<span>World</span></h3>\r\n                        <p> \r\n                            Pioneer St, Mandaluyong, 1550<br></br>\r\n                            Metro Manila, Philippines <br></br><br></br>\r\n                            <strong>Phone:</strong> +63 915 3421 385<br></br>\r\n                            <strong>Email:</strong> contactmicroworld@gmail.com<br></br>\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"col-lg-4 col-md-6 footer-links\">\r\n                        <h4>Useful Links</h4>\r\n                        <ul>\r\n                            <li><i><ChevronRight /></i><a href=\"#home\">Home</a></li>\r\n                            <li><i><ChevronRight /></i><a href=\"#about\">About us</a></li>\r\n                            <li><i><ChevronRight /></i><a href=\"#services\">Services</a></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"col-lg-4 col-md-6 footer-links\">\r\n                        <h4>Our Social Networks</h4>\r\n                        <p>Follow us to get updates</p>\r\n                        <div className=\"social-links mt-3\">\r\n                        <a href=\"https://twitter.com/MicroWorldGame\" className=\"twitter\"><i className=\"bx bxl-twitter\"><Twitter/></i></a>\r\n                        <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">SOON</Tooltip>}>\r\n                            <span className=\"d-inline-block\">\r\n                                <a href=\"#\" style={{ pointerEvents: 'none' }}><i><Facebook/></i></a>\r\n                            </span>\r\n                        </OverlayTrigger>\r\n                        <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">SOON</Tooltip>}>\r\n                            <span className=\"d-inline-block\">\r\n                            <a href=\"#\" style={{ pointerEvents: 'none' }}><i><Instagram/></i></a>\r\n                        </span>\r\n                        </OverlayTrigger>\r\n                        <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">SOON</Tooltip>}>\r\n                            <span className=\"d-inline-block\">\r\n                                <a href=\"#\" style={{ pointerEvents: 'none' }}><i><Discord/></i></a>\r\n                            </span>\r\n                        </OverlayTrigger>\r\n                        <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">SOON</Tooltip>}>\r\n                            <span className=\"d-inline-block\">\r\n                                <a href=\"#\" style={{ pointerEvents: 'none' }}><i><Telegram/></i></a>\r\n                            </span>\r\n                        </OverlayTrigger>\r\n                        </div>\r\n                    </div>\r\n                    </Row>\r\n                </Container>\r\n                </div>\r\n\r\n                <div className=\"container py-4\">\r\n                    <div className=\"copyright\">\r\n                        &copy; Copyright <strong><span>MicroWorld</span></strong>. All Rights Reserved\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\nimport './style.css';\r\n\r\nimport HeaderPage from \"./header\"\r\nimport ContentPage from \"./content\"\r\nimport FooterPage from \"./footer\"\r\n\r\nconst IndexPage = (obj) => {\r\n    return (\r\n        <>\r\n            <HeaderPage events={obj} />\r\n            <ContentPage ledger={obj.ledger} />\r\n            <FooterPage />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default IndexPage;","import Credentials from './Credentials.json';\r\nconst xrpl = require(\"xrpl\")\r\n\r\nclass Ledger {\r\n    constructor() {\r\n        this.PUBLIC_SERVER = \"wss://xrplcluster.com/\";\r\n        this.client = new xrpl.Client(this.PUBLIC_SERVER);\r\n        this.wallet = null;\r\n        this.isConnected = false;\r\n        this.credential = null;\r\n        this.errorOccured = false;\r\n        this.errorMessage = \"\";\r\n        this.request = {};\r\n        this.xrpAddress = \"\";\r\n    }\r\n\r\n    init = async() => {\r\n        await this.connect();\r\n\r\n        if (this.isConnected) {\r\n            console.log('Connected to the server!');\r\n\r\n            this.credential = JSON.parse(JSON.stringify(Credentials));\r\n\r\n            if (this.credential.Distributer && this.credential.Distributer.Seed) {\r\n                this.wallet = xrpl.Wallet.fromSeed(this.credential.Distributer.Seed);\r\n                this.getAccountObjects(\"rwGW8L6ftKx6RPPfLqNJQyFP1haa8WtSgH\");\r\n\r\n                //this.sendPayment(\"ra61PADiBWf5zvmq9DwccnbJAiMxxPSmht\", \"0.4\"); //SUCCESS\r\n                //this.setTrustLine();\r\n\r\n                // const bal = await this.getBalances(); SUCCESS\r\n                // console.log(bal.length)\r\n\r\n                // this.getLedgerData(); SUCCESS\r\n            } else {\r\n                this.errorOccured = true;\r\n                this.errorMessage = \"Distributer credentials is not valid!\"\r\n            }\r\n        } else {\r\n            this.errorOccured = true;\r\n            this.errorMessage = \"Failed to connect to the server!\"\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Connect the initialized client to the server\r\n     * @returns Promise<void>\r\n     * @returns A promise that resolves with a void value when a connection is established.\r\n     */\r\n    connect = async() => {\r\n        await this.client.connect().then(() => {\r\n            this.isConnected = this.isClientConnected();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks the initialized client connection to the server\r\n     * @returns boolean\r\n     */\r\n    isClientConnected = () => {\r\n        return this.client.isConnected();\r\n    }\r\n\r\n    isValidAddress = (address) => {\r\n        return xrpl.isValidClassicAddress(address);\r\n    }\r\n\r\n\r\n    doTestRun = async() => {\r\n        const test_wallet = xrpl.Wallet.fromSeed(\"sEdV7wfkswe6hbj8aqm3BrpZeeVnpSX\");\r\n\r\n        const response = await this.client.request({\r\n            \"command\": \"account_info\",\r\n            \"account\": test_wallet.address,\r\n            \"ledger_index\": \"validated\"\r\n        })\r\n\r\n        console.log(response, test_wallet)\r\n\r\n        // this.setTrustLine(test_wallet.address);\r\n    }\r\n\r\n    /**\r\n     * Fetch the XRP balance of the specified address\r\n     * @param {string} address \r\n     * @returns Promise<string>\r\n     * @returns The XRP balance of the account (as a string).\r\n     */\r\n    getXRPAddressBalance = async(address) => {\r\n        const balance = await this.client.getXrpBalance(address);\r\n        return balance;\r\n    }\r\n\r\n    /**\r\n     * Fetch the balances of the specified address\r\n     * @param {string} address \r\n     * @returns Promise<{ currency: string; issuer?: string; value: string }[]>\r\n     * @returns An array of XRP/non-XRP balances for the given account.\r\n     */\r\n    getBalances = async(address) => {\r\n        if (this.errorOccured) {\r\n            console.log('Error : ' + this.errorMessage);\r\n            return;\r\n        }\r\n\r\n        let xAddress = this.clientAddress;\r\n\r\n        if (address) {\r\n            xAddress = address;\r\n        }\r\n\r\n        const bal = await this.client.getBalances(xAddress);\r\n        return bal;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @returns \r\n     */\r\n    fundWallet = async() => {\r\n        const { wallet, balance } = await this.client.fundWallet();\r\n\r\n        return { wallet, balance };\r\n    }\r\n\r\n\r\n    /**\r\n     * Disconnect the initialized client to the server\r\n     * @returns Promise<void>\r\n     * @returns A promise that resolves with a void value when a connection is destroyed.\r\n     */\r\n    disconnect = () => {\r\n        this.client.disconnect();\r\n    }\r\n\r\n    sendPayment = async(address, amount) => {\r\n        const txJson = {\r\n            \"TransactionType\": \"Payment\",\r\n            \"Account\": \"rUHANRAVMVCiYb6Sn7KdmhYGhAd9iEAWVz\",\r\n            \"Amount\": xrpl.xrpToDrops(0.4),\r\n            \"Destination\": address\r\n        };\r\n\r\n        const prepared = await this.autoFill(txJson);\r\n        const max_ledger = prepared.LastLedgerSequence\r\n        console.log(\"Prepared transaction instructions:\", prepared)\r\n        console.log(\"Transaction cost:\", prepared.Fee, \"XRP\")\r\n        console.log(\"Transaction expires after ledger:\", max_ledger)\r\n\r\n        const signed = this.wallet.sign(prepared)\r\n        console.log(\"Identifying hash:\", signed.hash)\r\n        console.log(\"Signed blob:\", signed.tx_blob)\r\n\r\n        const tx = await this.submitTransaction(signed.tx_blob)\r\n        console.log(\"Transaction result:\", tx.result.meta.TransactionResult)\r\n        console.log(\"Balance changes:\", JSON.stringify(xrpl.getBalanceChanges(tx.result.meta), null, 2))\r\n    }\r\n\r\n    setTrustLine = async(address) => {\r\n        const txJson = {\r\n            \"TransactionType\": 'TrustSet',\r\n            \"Account\": address,\r\n            \"LimitAmount\": {\r\n                \"currency\": 'FOO',\r\n                \"issuer\": address,\r\n                \"value\": '10000000000',\r\n            },\r\n            \"Flags\": {\r\n                \"tfSetNoRipple\": true\r\n            }\r\n        }\r\n\r\n        const prepared = await this.autoFill(txJson);\r\n        const max_ledger = prepared.LastLedgerSequence\r\n        console.log(\"Prepared transaction instructions:\", prepared)\r\n        console.log(\"Transaction expires after ledger:\", max_ledger)\r\n\r\n        const signed = this.wallet.sign(prepared)\r\n        console.log(\"Identifying hash:\", signed.hash)\r\n        console.log(\"Signed blob:\", signed.tx_blob)\r\n\r\n        const tx = await this.submitTransaction(signed.tx_blob)\r\n        console.log(\"Transaction result:\", tx.result.meta.TransactionResult)\r\n        console.log(\"Balance changes:\", JSON.stringify(xrpl.getBalanceChanges(tx.result.meta), null, 2))\r\n    };\r\n\r\n    /////////////////////////////////CORE API/////////////////////////////////////////\r\n    /**\r\n     * Autofills fields in a transaction. \r\n     * This will set Sequence, Fee, lastLedgerSequence \r\n     * according to the current state of the server this Client is connected to. \r\n     * It also converts all X-Addresses to classic addresses and flags interfaces into numbers.\r\n     * @param {TRANSACTION in JSON format} transaction \r\n     * @param {int} signersCount \r\n     * @returns Promise<T>\r\n     */\r\n    autoFill = (transaction, signersCount) => {\r\n        const response = this.client.autofill(transaction);\r\n        return response;\r\n    }\r\n\r\n    submitTransaction = async(transaction) => {\r\n        const response = await this.client.submitAndWait(transaction);\r\n\r\n        return response;\r\n    }\r\n\r\n    getAccountChannel = async(address) => {\r\n        const response = await this.client.requestAll({\r\n            \"account\": address,\r\n            \"command\": \"account_channels\"\r\n        });\r\n\r\n        console.log('response', response)\r\n    }\r\n\r\n    getAccountLines = async(address) => {\r\n        const response = await this.client.requestAll({\r\n            \"account\": address,\r\n            \"command\": \"account_lines\"\r\n        });\r\n\r\n        console.log('response', response)\r\n    }\r\n\r\n    getAccountInfo = async(address) => {\r\n        const response = await this.client.request({\r\n            \"account\": address,\r\n            \"command\": \"account_info\"\r\n        })\r\n\r\n        console.log('response', response);\r\n    }\r\n\r\n    getAccountCurrencies = async(address) => {\r\n        const response = await this.client.request({\r\n            \"account\": address,\r\n            \"command\": \"account_currencies\"\r\n        })\r\n\r\n        console.log('response', response);\r\n    };\r\n\r\n    getAccountObjects = async(address) => {\r\n        const response = await this.client.requestAll({\r\n            \"account\": address,\r\n            \"command\": \"account_objects\"\r\n        });\r\n\r\n        console.log('response', response)\r\n    }\r\n\r\n    getLedgerData = async() => {\r\n        const response = await this.client.request({\r\n            \"command\": \"ledger_data\"\r\n        })\r\n\r\n        console.log('response', response);\r\n    }\r\n\r\n    getLedger = async() => {\r\n        const response = await this.client.request({\r\n            \"command\": \"ledger\"\r\n        })\r\n\r\n        console.log('response', response);\r\n    }\r\n}\r\n\r\nexport default Ledger;","import React, { Component } from 'react';\r\nimport { Route, Routes} from 'react-router-dom';\r\nimport Main from './components/pages'\r\nimport Ledger from \"./XRPLedger\"\r\n\r\n//  class CanvasRoute extends Component {\r\n//      componentDidMount() {\r\n//         console.log(\"this.props1\", this.props, localStorage )\r\n//        this.app = new App(this.container, this.gameOver, this.distance, this.props);\r\n//     }\r\n\r\n//      render() {\r\n//         console.log(\"this.props2\", this.props)\r\n//          return (\r\n//              <>\r\n//             <div className='world' ref={container => this.container = container}></div>\r\n            \r\n//             <div className='gameoverInstructions' ref={over => this.gameOver = over}>\r\n//                 Game Over\r\n//             </div>\r\n\r\n//             <div className='dist'>\r\n//                 <div className='label'>distance</div>\r\n//                 <div className='distValue' ref={value => this.distance = value}>000</div>\r\n//             </div>\r\n\r\n//             <div className='instructions'>Click to JUMP<span style={{\"color\": \"#5f9042\"}}> — Grab the carrots and avoid the hedgehogs</span></div>\r\n\r\n//             <div id=\"credits\">\r\n//                 <p>Mimimimimiimimimicro Woooooorllllllddd</p>\r\n//             </div>\r\n//             </>\r\n//          );\r\n//      }\r\n//  };\r\n\r\nclass Routers extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n          address: \"\",\r\n          ledger: new Ledger()\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log(this.state, prevState, prevProps);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Routes>\r\n                <Route exact path='/' element={\r\n                    <Main \r\n                        ledger={this.state.ledger} \r\n                        handleAddress={id => this.setState({ address: id })}\r\n                        add={this.state.address} \r\n                    />} \r\n                />\r\n                {/* <Route exact path='/RabbitRun' element={ \r\n                    <CanvasRoute \r\n                        ledger={this.state.ledger} \r\n                        address={this.state.address} \r\n                    />} \r\n                /> */}\r\n            </Routes>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Routers;","import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom'\nimport Routers from './Routes'\n\nfunction App() {\n  return (\n    <div className = \"App\" >\n      <BrowserRouter >\n        <Routers />\n        </BrowserRouter>  \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}